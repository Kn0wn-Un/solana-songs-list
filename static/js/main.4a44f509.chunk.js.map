{"version":3,"sources":["assets/twitter-logo.svg","App.jsx","index.jsx"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","resp","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","trim","length","addGif","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","href","gifLink","alt","src","twitterLogo","rel","globalThis","Buffer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a44f509.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, {useState, useEffect} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport kp from './keypair.json'\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletConnected = async () => {\n    try{\n      const {solana} = window;\n      if(solana){\n         if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const resp = await solana.connect({onlyIfTrusted: true})\n          console.log(\n            'Connected with Public Key:',\n            resp.publicKey.toString()\n          );\n          setWalletAddress(resp.publicKey.toString());\n        }\n      } else {\n        alert('Get Phantom Wallet!')\n      }\n    }\n    catch(error) {\n      console.error(error)\n    }\n  }\n\n  const connectWallet = async () => {\n    const {solana} = window;\n    if(solana){\n      const resp = await solana.connect();\n      console.log(\"wallet connected!\");\n      console.log(resp.publicKey.toString());\n      setWalletAddress(resp.publicKey.toString());\n    }\n\n  }\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.trim().length > 0) {\n      console.log('Gif link:', inputValue);\n      console.log('Gif link:', inputValue);\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n\n        await program.rpc.addGif(inputValue, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully sent to program\", inputValue)\n\n        await getGifList();\n      } catch (error) {\n        console.log(\"Error sending GIF:\", error)\n      }\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For Song Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter song link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <a href={item.gifLink} target=\"_blank\"><div>{index + 1 + \". \"}{item.gifLink}</div></a>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n\n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Solana Songs List 🎶</p>\n          <p className=\"sub-text\">\n            View song list in the solana ✨\n          </p>\n          {walletAddress ? renderConnectedContainer() : renderNotConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n          <a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref=\"https://github.com/Kn0wn-Un\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tby Kn0wn-Un\n\t\t\t\t\t</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Buffer } from 'buffer';\n// eslint-disable-next-line no-undef\nglobalThis.Buffer = Buffer;\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}